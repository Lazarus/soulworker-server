package network

import (
	"log"
	"time"

	. "soulworker-server/network/structures"

	. "soulworker-server/network/packets"

	"soulworker-server/database"
	"soulworker-server/global"
)

// GameNetwork - Container for the GameNetwork
type GameNetwork struct {
	Network
}

// NewGameWorld - Creates a new GameNetwork instance
func NewGameWorld() *GameNetwork {
	gameWorld := &GameNetwork{
		Network{
			Name: "Game Network",
			Port: global.GameWorldPort,
		},
	}
	gameWorld.dataHandler = gameWorld.process
	return gameWorld
}

// process - Processes data from the network from the given connection, with the given packetId and packet buffer contents
// It returns an abstract integer value
func (gameWorld *GameNetwork) process(channel *Connection, packetID PacketType, packet interface{}) int {
	switch packetID {
	case Game_EnterGameServerRequest:
		enterGameServerRequest := packet.(*EnterGameServerRequest)
		channel.accountId = enterGameServerRequest.AccountId

		//if id := database.VerifySessionKey(channel.accountId, ClientEnterGameServerReq.SessionKey); id == 0 {
		//	log.Fatal("Invalid sessionKey", ClientEnterGameServerReq.SessionKey, "for account", channel.accountId)
		//} else {
		//	fmt.Println("Session key is okay!")
		//}

		now := time.Now()
		serverWorldCurDate := ServerWorldCurDate{
			Timestamp: uint64(now.Unix()),
			Year:      uint16(now.Year()),
			Month:     uint16(now.Month()),
			Day:       uint16(now.Day()),
			Hour:      uint16(now.Hour()),
			Minute:    uint16(now.Minute()),
			Second:    uint16(now.Second()),
		}
		channel.writeQueue <- &serverWorldCurDate

		serverWorldVersion := ServerWorldVersion{
			Unknown2: 1,
			Unknown3: 0x0322,
			Unknown4: 0x3BBB,
		}
		channel.writeQueue <- &serverWorldVersion

		serverEnterGameServerRes := EnterGameServerResponse{
			Result: 1,
			Position: WorldPosition{
				MapId:       10003,
				X:           10444.9951,
				Y:           10179.7461,
				Z:           100.325394,
				Orientation: 100.0,
			},
			Unknown2: 0,
			Unknown3: 0,
		}
		serverEnterGameServerRes.Unknown = channel.accountId

		channel.writeQueue <- &serverEnterGameServerRes

		//packet1 := [][]byte{
		//	{0x02, 0x00, 0x1d, 0x00, 0x01, 0x64, 0x38, 0x26, 0xfe, 0x21, 0x56, 0x60, 0x3b, 0x0b, 0x60, 0xd8, 0x0c, 0x67, 0x3b, 0x09, 0x60, 0x3b, 0x0b, 0x5a, 0x3b, 0x2e, 0x60, 0x3b, 0x0b},
		//	{0x02, 0x00, 0x17, 0x00, 0x01, 0x64, 0x3f, 0x0b, 0x60, 0x3b, 0x0b, 0x61, 0x3b, 0x0b, 0x60, 0x2e, 0x08, 0x60, 0x3b, 0xb1, 0x59, 0x3b, 0x0b},
		//	{0x02, 0x00, 0x9d, 0x02, 0x01, 0x4a, 0x1b, 0xae, 0x60, 0xe0, 0x59, 0x75, 0x2f, 0xd7, 0x32, 0x12, 0x1f, 0x87, 0x69, 0x0a, 0x74, 0xd4, 0x59, 0x61, 0x2f, 0xf0, 0x32, 0xcc, 0x18, 0x20, 0x68, 0x0a, 0x74, 0x70, 0x58, 0x75, 0x2f, 0x54, 0x33, 0x24, 0x1f, 0xc5, 0x68, 0x1e, 0x74, 0x95, 0x58, 0x6b, 0x2f, 0xbc, 0x33, 0x2e, 0x1f, 0xd9, 0x68, 0x0a, 0x74, 0xf9, 0x58, 0x61, 0x2f, 0xc8, 0x33, 0x2e, 0x1f, 0x72, 0x6f, 0x0a, 0x74, 0x28, 0x5f, 0x7f, 0x2f, 0x10, 0x34, 0x08, 0x1f, 0x7c, 0x6f, 0xfc, 0x73, 0x1e, 0x5f, 0x7f, 0x2f, 0x2d, 0x34, 0xcc, 0x18, 0x47, 0x6f, 0x00, 0x74, 0x52, 0x5d, 0x61, 0x2f, 0x61, 0x36, 0x30, 0x1f, 0x0b, 0x6d, 0x1e, 0x74, 0x4f, 0x5d, 0x53, 0x2f, 0x7e, 0x36, 0x3a, 0x1f, 0x1f, 0x6d, 0x14, 0x74, 0xff, 0x5d, 0x6b, 0x2f, 0xce, 0x36, 0x24, 0x1f, 0xaf, 0x6d, 0xfc, 0x73, 0xe2, 0x5d, 0x75, 0x2f, 0x39, 0x37, 0x24, 0x1f, 0x5c, 0x6c, 0x22, 0x74, 0x06, 0x5c, 0x97, 0x28, 0x4d, 0x37, 0x3a, 0x1f, 0x27, 0x6c, 0x00, 0x74, 0xb0, 0x5c, 0x6b, 0x2f, 0x86, 0x37, 0x30, 0x1f, 0xf6, 0x6c, 0x22, 0x74, 0x9b, 0x5c, 0x7f, 0x2f, 0xa1, 0x37, 0x2e, 0x1f, 0xcb, 0x6c, 0x00, 0x74, 0x38, 0x53, 0x61, 0x2f, 0x0e, 0x38, 0x24, 0x1f, 0x6d, 0x63, 0x14, 0x74, 0x35, 0x53, 0x75, 0x2f, 0x04, 0x38, 0x2e, 0x1f, 0x27, 0x61, 0x00, 0x74, 0x68, 0x51, 0x7f, 0x2f, 0x57, 0x3a, 0x24, 0x1f, 0x3d, 0x61, 0x00, 0x74, 0x5d, 0x51, 0x53, 0x2f, 0x6c, 0x3a, 0x3a, 0x1f, 0xcc, 0x61, 0x22, 0x74, 0x96, 0x51, 0x7f, 0x2f, 0xca, 0x3a, 0x30, 0x1f, 0xaa, 0x61, 0x0a, 0x74, 0x2b, 0x50, 0x6b, 0x2f, 0x11, 0x3b, 0x12, 0x1f, 0x44, 0x60, 0xfc, 0x73, 0x1e, 0x50, 0x7f, 0x2f, 0x24, 0x3b, 0x24, 0x1f, 0x1e, 0x60, 0x22, 0x74, 0x44, 0x50, 0x97, 0x28, 0x8c, 0x3b, 0x24, 0x1f, 0xe8, 0x60, 0x00, 0x74, 0xb2, 0x50, 0x6b, 0x2f, 0x9a, 0x3b, 0x24, 0x1f, 0xb8, 0x60, 0x14, 0x74, 0xd9, 0x50, 0x75, 0x2f, 0xe8, 0x3b, 0xcc, 0x18, 0x96, 0x60, 0x1e, 0x74, 0xcc, 0x50, 0x6b, 0x2f, 0x30, 0x3c, 0x2e, 0x1f, 0x26, 0x67, 0xfc, 0x73, 0x7c, 0x57, 0x97, 0x28, 0x5a, 0x3c, 0x24, 0x1f, 0x39, 0x67, 0x1e, 0x74, 0x60, 0x57, 0x7f, 0x2f, 0x3b, 0x3e, 0x2e, 0x1f, 0x51, 0x65, 0x0a, 0x74, 0x01, 0x55, 0x61, 0x2f, 0x45, 0x3e, 0xcc, 0x18, 0x2f, 0x65, 0x00, 0x74, 0xaf, 0x55, 0x97, 0x28, 0x96, 0x3e, 0x2e, 0x1f, 0xfe, 0x65, 0x0a, 0x74, 0x9c, 0x55, 0x61, 0x2f, 0xa3, 0x3e, 0x30, 0x1f, 0xc9, 0x65, 0x14, 0x74, 0x88, 0x55, 0x61, 0x2f, 0xf3, 0x3e, 0x2e, 0x1f, 0x6b, 0x64, 0xfc, 0x73, 0x37, 0x54, 0x7f, 0x2f, 0x06, 0x3f, 0xcc, 0x18, 0x76, 0x64, 0x1e, 0x74, 0x2c, 0x54, 0x75, 0x2f, 0x50, 0x3f, 0xcc, 0x18, 0x3c, 0x64, 0x38, 0x74, 0x66, 0x54, 0x61, 0x2f, 0x6c, 0x3f, 0xcc, 0x18, 0x10, 0x64, 0x0a, 0x74, 0x4a, 0x54, 0x61, 0x2f, 0x72, 0x3f, 0xcc, 0x18, 0xa1, 0x64, 0x1e, 0x74, 0xef, 0x54, 0x49, 0x2f, 0xd5, 0x3f, 0x30, 0x1f, 0xbf, 0x64, 0x14, 0x74, 0x15, 0x6b, 0x75, 0x2f, 0x24, 0x00, 0x3a, 0x1f, 0x58, 0x5b, 0x14, 0x74, 0x7a, 0x6b, 0x97, 0x28, 0x49, 0x00, 0x3a, 0x1f, 0x23, 0x5b, 0x38, 0x74, 0xb3, 0x6b, 0x97, 0x28, 0x82, 0x00, 0xcc, 0x18, 0xf2, 0x5b, 0x22, 0x74, 0xa7, 0x6b, 0x97, 0x28, 0xac, 0x00, 0x3a, 0x1f, 0x79, 0x59, 0x0a, 0x74, 0x19, 0x69, 0x61, 0x2f, 0x28, 0x02, 0x24, 0x1f, 0x4b, 0x59, 0x14, 0x74, 0x0d, 0x69, 0x61, 0x2f, 0x70, 0x02, 0xcc, 0x18, 0x1c, 0x59, 0x22, 0x74, 0xbe, 0x69, 0x6b, 0x2f, 0x8d, 0x02, 0x2e, 0x1f, 0xf0, 0x59, 0xfc, 0x73, 0xaa, 0x69, 0x6b, 0x2f, 0x90, 0x02, 0x24, 0x1f, 0x80, 0x59, 0x1e, 0x74, 0xd2, 0x69, 0x97, 0x28, 0xe0, 0x02, 0x2e, 0x1f, 0x94, 0x59, 0x00, 0x74, 0xc6, 0x69, 0x6b, 0x2f, 0xf5, 0x02, 0x30, 0x1f, 0x9f, 0x59, 0x1e, 0x74, 0x74, 0x68, 0x53, 0x2f, 0x53, 0x03, 0x24, 0x1f, 0x39, 0x58, 0x0a, 0x74, 0x3a, 0x6d, 0x61, 0x2f, 0x00, 0x06, 0x2e, 0x1f, 0x73, 0x5d, 0x14, 0x74, 0x2f, 0x6d, 0x7f, 0x2f, 0x16, 0x06, 0x30, 0x1f, 0x7f, 0x5d, 0x0a, 0x74, 0x5e, 0x6d, 0x6b, 0x2f, 0x66, 0x06, 0x30, 0x1f, 0x0f, 0x5d, 0xfc, 0x73, 0x4c, 0x6d, 0x61, 0x2f, 0x73, 0x06, 0xcc, 0x18, 0xe3, 0x5d, 0x00, 0x74, 0xfc, 0x6d, 0x6b, 0x2f, 0xc3, 0x06, 0xcc, 0x18, 0xa9, 0x5d, 0x14, 0x74, 0xea, 0x6d, 0x7f, 0x2f, 0xed, 0x06, 0x2e, 0x1f, 0x87, 0x5d, 0x1e, 0x74, 0x10, 0x6c, 0x7f, 0x2f, 0x26, 0x07, 0x2e, 0x1f, 0x55, 0x5c, 0x38, 0x74, 0x0c, 0x6c, 0x75, 0x2f, 0x41, 0x07, 0x24, 0x1f, 0x2b, 0x5c, 0xfc, 0x73},
		//	{0x02, 0x00, 0x13, 0x00, 0x01, 0x77, 0x68, 0x3c, 0x11, 0x3a, 0x0b, 0x60, 0xaf, 0xd5, 0x25, 0x3b, 0x9f, 0xbe, 0x7e},
		//	{0x02, 0x00, 0x2b, 0x00, 0x01, 0x63, 0x19, 0x0b, 0x60, 0x3b, 0x0b, 0x61, 0x78, 0x2c, 0xe5, 0x3b, 0x0b, 0x63, 0x78, 0x2c, 0x61, 0x3b, 0xc5, 0xe2, 0x8b, 0x4c, 0x54, 0x2a, 0x03, 0x27, 0x33, 0xbd, 0x6e, 0x7d, 0x0b, 0x60, 0x3b, 0x0b, 0x71, 0x1c, 0xb2, 0x0e, 0x04},
		//	{0x02, 0x00, 0x12, 0x00, 0x01, 0x63, 0x7c, 0x3c, 0x11, 0x3a, 0x0b, 0x61, 0x2e, 0x0b, 0x53, 0x48, 0x91, 0x23},
		//	{0x02, 0x00, 0x3b, 0x00, 0x01, 0x53, 0x3d, 0x66, 0x32, 0x3b, 0x0b, 0x14, 0xa1, 0x10, 0x3d, 0x3b, 0x0b, 0x60, 0x3b, 0xab, 0xfb, 0x20, 0x56, 0x60, 0x3b, 0x0b, 0x60, 0xbf, 0xa3, 0x7b, 0x66, 0x0b, 0x60, 0x3b, 0x0b, 0xd0, 0x92, 0x10, 0x3d, 0x3b, 0x0b, 0x60, 0x3b, 0xaf, 0xa4, 0x20, 0x56, 0x60, 0x3b, 0x0b, 0x60, 0xeb, 0xce, 0x7b, 0x66, 0x0b, 0x60, 0x3b, 0x0b},
		//	{0x02, 0x00, 0x13, 0x00, 0x01, 0x61, 0x3e, 0x4c, 0xfa, 0x29, 0x19, 0x60, 0x3b, 0x0b, 0x60, 0xd5, 0x02, 0x45, 0x37},
		//}
		//
		//for i := 0; i < len(packet1); i++ {
		//	packet := packet1[i]
		//	packetID, decrypted := Decrypt(packet[5:])
		//
		//	channel.writeQueue <- global.Packet{ID: packetID, Data: decrypted}
		//}

	case Game_CharacterInfoRequest:
		characterInfoRequest := packet.(*CharacterInfoRequest)

		charInfo, err := database.FetchUserCharacterByCharacterId(characterInfoRequest.CharacterId)
		if err != nil {
			log.Fatal(err)
		}

		// id, name, class, appearance, level
		charInfo.AccountId = channel.accountId
		charInfo.Stats = Stats{
			MoveSpeed: 100,
		}
		channel.characterInfo = &charInfo

		serverCharacterInfoRes := CharacterInfoResponse{
			MyCharacterInfo: MyCharacterInfoEx{
				CharacterInfo: CharacterInfoEx{
					Character: &charInfo,
					Position: WorldPosition{
						MapId:       10003,
						X:           10444.9951,
						Y:           10179.7461,
						Z:           100.325394,
						Orientation: 100.0,
					},
				},
			},
		}
		channel.writeQueue <- &serverCharacterInfoRes
	case 0x0105:
		/*
			packet := []byte{
				0x02, 0x00, 0x0d, 0x00, 0x01, 0x4b, 0x38, 0x0b,
				0xba, 0x20, 0x0b, 0x60, 0x3b, 0x02, 0x00, 0x0f,
				0x00, 0x01, 0x67, 0x3e, 0x0a, 0x60, 0x3b, 0x0b,
				0x80, 0xf6, 0x0b, 0x60, 0x02, 0x00, 0x15, 0x00,
				0x01, 0x48, 0x3a, 0x0e, 0x60, 0x22, 0x0b, 0x60,
				0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b,
				0x60, 0x02, 0x00, 0x0b, 0x00, 0x01, 0x64, 0x7f,
				0x0b, 0xba, 0x20, 0x0b,
			}
			packetID, decrypted := Decrypt(packet[5:])

			channel.writeQueue <- global.Packet{ID: packetID, Data: decrypted}

			packet2 := [][]byte{
				{0x02, 0x00, 0x79, 0x01, 0x01, 0x63, 0x09, 0x0b, 0xba, 0x20, 0x0b, 0x6e, 0x3b, 0x47, 0x60, 0x5a, 0x0b, 0x1a, 0x3b, 0x6a, 0x60, 0x49, 0x0b, 0x15, 0x3b, 0x3e, 0x60, 0x38, 0x0b, 0x77, 0x3e, 0xf4, 0x68, 0x8e, 0x1f, 0x86, 0x37, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x0f, 0x0f, 0xf1, 0xe9, 0x05, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x65, 0x48, 0x26, 0xa3, 0x3d, 0x0b, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0xf4, 0x95, 0xb7, 0xcd, 0x6d, 0x2e, 0x6e, 0xae, 0x36, 0xf6, 0xd3, 0xf5, 0x06, 0xa1, 0x33, 0xc4, 0x6d, 0x9a, 0x39, 0xb4, 0x36, 0xf4, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0xf4, 0x9f, 0x96, 0x34, 0xa5, 0x36, 0x74, 0xe7, 0xdf, 0x06, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0xf4, 0x6f, 0xb2, 0xef, 0x6d, 0x9a, 0x4a, 0xa5, 0x36, 0xf8, 0x74, 0xd6, 0x06, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0xf4, 0x9f, 0xc4, 0x1a, 0x20, 0xfe, 0x06, 0x83, 0xbc, 0xef, 0x6d, 0xae, 0x19, 0xa9, 0x36, 0x7e, 0xa4, 0xf3, 0x06, 0x60, 0x3b, 0x0b, 0x60, 0xfd, 0x99, 0x61, 0x3b, 0x3f, 0x6f, 0x38, 0x0b, 0xcb, 0x34, 0x0b, 0x60, 0x35, 0x0b, 0x2e, 0x3b, 0x64, 0x60, 0x4f, 0x0b, 0x08, 0x3b, 0x62, 0x60, 0x55, 0x0b, 0x07, 0x3b, 0x1f, 0x64, 0xe5, 0x0c, 0x84, 0x50, 0x0b, 0x60, 0xdf, 0x60, 0x60, 0x3b, 0xc3, 0x60, 0x3b, 0x0b, 0xa8, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x04, 0x3b, 0x0b, 0x60, 0x5f, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0xa8, 0x79, 0x0b, 0x60, 0xe9, 0x49, 0x60, 0x3b, 0x0b, 0xa8, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x59, 0x1c, 0x88, 0x60, 0x3b, 0x0a, 0x59, 0x1c, 0x0a, 0x60, 0x62, 0xaa, 0xa8, 0x7d, 0xee, 0x45, 0x88, 0x4d, 0xba, 0x6b, 0x6e, 0x25, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x8c, 0x88, 0x4e, 0x60, 0xd7, 0xb8, 0x25, 0xc9, 0x2f, 0x90, 0x38, 0x9f, 0x37, 0x8e, 0x00, 0x60, 0x3b, 0x0b, 0x60, 0x3f, 0x0b, 0x60, 0x3b, 0xb4, 0x5e, 0xc4, 0xd4, 0x79, 0x56, 0x34, 0x7c, 0xdb, 0x1a, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x9f, 0x09, 0x0a, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3d, 0x0b, 0x59, 0x0c, 0x3a, 0x54, 0x0b, 0x32, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0a},
				{0x02, 0x00, 0x6f, 0x01, 0x01, 0x66, 0x4b, 0x52, 0xc1, 0xf3, 0x4d, 0xe3, 0x3b, 0x0b, 0x60, 0x38, 0x0b, 0x7d, 0x0e, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0xaa, 0x71, 0xe3, 0x61, 0x3b, 0x0b, 0x60, 0x3b, 0x58, 0xa5, 0xe0, 0x0a, 0x60, 0x3b, 0x0b, 0x60, 0x5e, 0x41, 0x88, 0x3a, 0x0b, 0x60, 0x3b, 0x0b, 0x3d, 0x30, 0xe2, 0x61, 0x3b, 0x0b, 0x60, 0x3b, 0x87, 0xe0, 0xd2, 0x0a, 0x60, 0x3b, 0x0b, 0x60, 0x80, 0xfe, 0x89, 0x3a, 0x0b, 0x60, 0x3b, 0x0b, 0x9f, 0x31, 0x13, 0x62, 0x3b, 0x0b, 0x60, 0x3b, 0x08, 0x2a, 0xd3, 0x0a, 0xaf, 0x30, 0x0b, 0x60, 0x7a, 0x95, 0xbb, 0x3a, 0x0b, 0x60, 0x3b, 0x0b, 0x0f, 0x6a, 0x2e, 0x62, 0x3b, 0x0b, 0x60, 0x3b, 0x28, 0x2d, 0xd3, 0x0a, 0x97, 0x30, 0x0b, 0x60, 0xa4, 0x42, 0x88, 0x3a, 0xce, 0x6b, 0x3b, 0x0b, 0x4f, 0x34, 0x1d, 0x62, 0x3b, 0x0b, 0x60, 0x3b, 0xb5, 0x2c, 0xd3, 0x0a, 0x60, 0x3b, 0x0b, 0x60, 0x02, 0x42, 0x88, 0x3a, 0x0b, 0x60, 0x3b, 0x0b, 0x2b, 0xdf, 0xe3, 0x61, 0x3b, 0x0b, 0x60, 0x3b, 0x8e, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x46, 0x52, 0x89, 0x3a, 0x0b, 0x60, 0x3b, 0x0b, 0xb4, 0x73, 0xe3, 0x61, 0x3b, 0x0b, 0x60, 0x3b, 0xa7, 0xae, 0xd2, 0x0a, 0x60, 0x3b, 0x0b, 0x60, 0x61, 0x47, 0x88, 0x3a, 0x0b, 0x60, 0x3b, 0x0b, 0x4f, 0x4c, 0xd0, 0x61, 0x3b, 0x0b, 0x60, 0x3b, 0x7a, 0x28, 0xd3, 0x0a, 0x60, 0x3b, 0x0b, 0x60, 0xcc, 0x40, 0x88, 0x3a, 0xe7, 0x6b, 0x3b, 0x0b, 0xf3, 0x70, 0xe3, 0x61, 0x3b, 0x0b, 0x60, 0x3b, 0x90, 0xc7, 0xd2, 0x0a, 0x60, 0x3b, 0x0b, 0x60, 0xf0, 0x17, 0x8a, 0x3a, 0x0b, 0x60, 0x3b, 0x0b, 0x4f, 0x70, 0xe3, 0x61, 0x3b, 0x0b, 0x60, 0x3b, 0x0d, 0x60, 0x3b, 0x08, 0x2a, 0xd3, 0x0a, 0xff, 0x72, 0xe3, 0x61, 0x18, 0x46, 0x88, 0x3a, 0x0b, 0x60, 0x3b, 0x0b, 0x61, 0x3b, 0xfc, 0x2b, 0xd3, 0x0a, 0x97, 0x70, 0xe3, 0x61, 0xcc, 0x40, 0x88, 0x3a, 0x0b, 0x60, 0x3b, 0x0b, 0x62, 0x3b, 0x98, 0x2b, 0xd3, 0x0a, 0xde, 0x77, 0xe3, 0x61, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x63, 0x3b, 0x32, 0x29, 0xd3, 0x0a, 0x63, 0x71, 0xe3, 0x61, 0xa4, 0x42, 0x88, 0x3a, 0x0b, 0x60, 0x3b, 0x0b, 0x64, 0x3b, 0x7a, 0x28, 0xd3, 0x0a, 0xaa, 0x71, 0xe3, 0x61, 0x5e, 0x41, 0x88, 0x3a, 0x0b, 0x60, 0x3b, 0x0b, 0x65, 0x3b, 0x51, 0x2c, 0xd3, 0x0a, 0x63, 0x71, 0xe3, 0x61, 0xa4, 0x42, 0x88, 0x3a, 0x0b, 0x60, 0x3b, 0x0b, 0x63, 0x3b, 0x06, 0x60, 0x2e, 0x0b, 0x60, 0x3b},
				{0x02, 0x00, 0x15, 0x00, 0x01, 0x48, 0x3a, 0x0e, 0x60, 0x22, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60},
				{0x02, 0x00, 0x0f, 0x00, 0x01, 0x61, 0x32, 0x09, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x0b, 0x60},
				{0x02, 0x00, 0x15, 0x00, 0x01, 0x61, 0x3c, 0x0a, 0x60, 0x3a, 0x0b, 0x61, 0x3a, 0x0b, 0x60, 0x3a, 0x0b, 0x60, 0x3a, 0x0b, 0x61},
				{0x02, 0x00, 0x2c, 0x00, 0x01, 0x63, 0x5a, 0x0f, 0x73, 0x1c, 0x0b, 0x60, 0x5f, 0x0b, 0x60, 0x3b, 0x0a, 0x45, 0x1c, 0x0b, 0x60, 0x49, 0x0a, 0x60, 0x3b, 0x0b, 0x4f, 0x1c, 0x0b, 0x60, 0x01, 0x08, 0x60, 0x3b, 0x0b, 0x59, 0x1c, 0x0b, 0x60, 0xe5, 0x08, 0x60, 0x3b, 0x0b},
				{0x02, 0x00, 0xc2, 0x01, 0x01, 0x63, 0x59, 0x1e, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x2b, 0x60, 0x3b, 0x0b, 0x73, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x1f, 0x60, 0x3b, 0x0b, 0x65, 0x3b, 0x0b, 0x60, 0x3b, 0x2a, 0x60, 0x3b, 0x0b, 0x73, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x1f, 0x60, 0x3b, 0x0b, 0x65, 0x3b, 0x0b, 0x60, 0x3b, 0x29, 0x60, 0x3b, 0x0b, 0x73, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x15, 0x60, 0x3b, 0x0b, 0x65, 0x3b, 0x0b, 0x60, 0x3b, 0x28, 0x60, 0x3b, 0x0b, 0x73, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x15, 0x60, 0x3b, 0x0b, 0x65, 0x3b, 0x0b, 0x60, 0x3b, 0x22, 0x60, 0x3b, 0x0b, 0x45, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x23, 0x60, 0x3b, 0x0b, 0x65, 0x3b, 0x0b, 0x60, 0x3b, 0x21, 0x60, 0x3b, 0x0b, 0x45, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x5b, 0x60, 0x3b, 0x0b, 0x65, 0x3b, 0x0b, 0x60, 0x3b, 0x20, 0x60, 0x3b, 0x0b, 0x45, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x5b, 0x60, 0x3b, 0x0b, 0x65, 0x3b, 0x0b, 0x60, 0x3b, 0x27, 0x60, 0x3b, 0x0b, 0x45, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x6f, 0x60, 0x3b, 0x0b, 0x65, 0x3b, 0x0b, 0x60, 0x3b, 0x26, 0x60, 0x3b, 0x0b, 0x45, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x4d, 0x60, 0x3b, 0x0b, 0x63, 0x3b, 0x0b, 0x60, 0x3b, 0x38, 0x60, 0x3b, 0x0b, 0x4f, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x6f, 0x60, 0x3b, 0x0b, 0x65, 0x3b, 0x0b, 0x60, 0x3b, 0x3f, 0x60, 0x3b, 0x0b, 0x4f, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x87, 0x60, 0x3b, 0x0b, 0x64, 0x3b, 0x0b, 0x60, 0x3b, 0x3e, 0x60, 0x3b, 0x0b, 0x4f, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x89, 0x60, 0x3b, 0x0b, 0x64, 0x3b, 0x0b, 0x60, 0x3b, 0x3d, 0x60, 0x3b, 0x0b, 0x4f, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0xbf, 0x60, 0x3b, 0x0b, 0x65, 0x3b, 0x0b, 0x60, 0x3b, 0x3c, 0x60, 0x3b, 0x0b, 0x4f, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x8f, 0x60, 0x3b, 0x0b, 0x62, 0x3b, 0x0b, 0x60, 0x3b, 0x33, 0x60, 0x3b, 0x0b, 0x4f, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x9b, 0x60, 0x3b, 0x0b, 0x62, 0x3b, 0x0b, 0x60, 0x3b, 0x36, 0x60, 0x3b, 0x0b, 0x59, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0xc7, 0x60, 0x3b, 0x0b, 0x63, 0x3b, 0x0b, 0x60, 0x3b, 0x35, 0x60, 0x3b, 0x0b, 0x59, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0xbf, 0x60, 0x3b, 0x0b, 0x62, 0x3b, 0x0b, 0x60, 0x3b, 0x34, 0x60, 0x3b, 0x0b, 0x59, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0xa3, 0x60, 0x3b, 0x0b, 0x62, 0x3b, 0x0b, 0x60, 0x3b, 0x4b, 0x60, 0x3b, 0x0b, 0x59, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x73, 0x60, 0x3b, 0x0b, 0x61, 0x3b, 0x0b, 0x60, 0x3b, 0x4a, 0x60, 0x3b, 0x0b, 0x59, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0xcb, 0x60, 0x3b, 0x0b, 0x61, 0x3b, 0x0b, 0x60, 0x3b, 0x49, 0x60, 0x3b, 0x0b, 0x59, 0x1c, 0x0b, 0x60, 0x3b, 0x0b, 0x60, 0x3b, 0x75, 0x60, 0x3b, 0x0b, 0x60},
				{0x02, 0x00, 0x17, 0x03, 0x01, 0x71, 0x5f, 0x1e, 0x40, 0x3b, 0x0b, 0x60, 0x33, 0x0b, 0xbb, 0x69, 0x0b, 0x60, 0xe7, 0x59, 0x60, 0x3b, 0xee, 0x32, 0x3b, 0x0b, 0x8f, 0x69, 0x0b, 0x60, 0xca, 0x59, 0x60, 0x3b, 0xf2, 0x32, 0x3b, 0x0b, 0x9a, 0x69, 0x0b, 0x60, 0xc0, 0x59, 0x60, 0x3b, 0x2a, 0x60, 0x3b, 0x0b, 0x66, 0x3b, 0x34, 0x33, 0x3b, 0x0b, 0x21, 0x68, 0x0b, 0x60, 0x72, 0x58, 0x60, 0x3b, 0x58, 0x33, 0x3b, 0x0b, 0x3d, 0x68, 0x0b, 0x60, 0x65, 0x58, 0x60, 0x3b, 0x29, 0x60, 0x3b, 0x0b, 0x65, 0x3b, 0xa8, 0x33, 0x3b, 0x0b, 0xcd, 0x68, 0x0b, 0x60, 0x8c, 0x58, 0x60, 0x3b, 0xca, 0x33, 0x3b, 0x0b, 0xa3, 0x68, 0x0b, 0x60, 0x18, 0x0b, 0x60, 0x3b, 0x0c, 0x60, 0x3c, 0x5f, 0x60, 0x3b, 0x1a, 0x34, 0x3b, 0x0b, 0x73, 0x6f, 0x0b, 0x60, 0x20, 0x5f, 0x60, 0x3b, 0x16, 0x34, 0x3b, 0x0b, 0x45, 0x6f, 0x0b, 0x60, 0x1c, 0x5f, 0x60, 0x3b, 0x22, 0x60, 0x3b, 0x0b, 0x69, 0x3b, 0x54, 0x36, 0x3b, 0x0b, 0x00, 0x6d, 0x0b, 0x60, 0x52, 0x5d, 0x60, 0x3b, 0x61, 0x36, 0x3b, 0x0b, 0x0b, 0x6d, 0x0b, 0x60, 0x48, 0x5d, 0x60},
			}

			for i := 0; i < len(packet2); i++ {
				packet := packet2[i]
				packetID, decrypted := Decrypt(packet[5:])

				channel.writeQueue <- global.Packet{ID: packetID, Data: decrypted}
			}
		*/
		break
	}

	return 0
}
